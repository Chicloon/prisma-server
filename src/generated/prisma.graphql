# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Animal implements Node {
  id: ID!
  name: String!
  tail: Boolean!
  legs: Int!
  owners(where: UserWhereInput): User!
}

type Channel implements Node {
  id: ID!
  name: String!
  owner(where: UserWhereInput): User!
  members(where: ChannelMemberWhereInput, orderBy: ChannelMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChannelMember!]
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  animals(where: AnimalWhereInput, orderBy: AnimalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Animal!]
}


#
# Other Types
#

type AggregateAnimal {
  count: Int!
}

type AggregateChannel {
  count: Int!
}

type AggregateChannelMember {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AnimalConnection {
  pageInfo: PageInfo!
  edges: [AnimalEdge]!
  aggregate: AggregateAnimal!
}

input AnimalCreateInput {
  name: String!
  tail: Boolean!
  legs: Int!
  owners: UserCreateOneWithoutAnimalsInput!
}

input AnimalCreateManyWithoutOwnersInput {
  create: [AnimalCreateWithoutOwnersInput!]
  connect: [AnimalWhereUniqueInput!]
}

input AnimalCreateWithoutOwnersInput {
  name: String!
  tail: Boolean!
  legs: Int!
}

type AnimalEdge {
  node: Animal!
  cursor: String!
}

enum AnimalOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  tail_ASC
  tail_DESC
  legs_ASC
  legs_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnimalPreviousValues {
  id: ID!
  name: String!
  tail: Boolean!
  legs: Int!
}

type AnimalSubscriptionPayload {
  mutation: MutationType!
  node: Animal
  updatedFields: [String!]
  previousValues: AnimalPreviousValues
}

input AnimalSubscriptionWhereInput {
  AND: [AnimalSubscriptionWhereInput!]
  OR: [AnimalSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnimalWhereInput
}

input AnimalUpdateInput {
  name: String
  tail: Boolean
  legs: Int
  owners: UserUpdateOneWithoutAnimalsInput
}

input AnimalUpdateManyWithoutOwnersInput {
  create: [AnimalCreateWithoutOwnersInput!]
  connect: [AnimalWhereUniqueInput!]
  disconnect: [AnimalWhereUniqueInput!]
  delete: [AnimalWhereUniqueInput!]
  update: [AnimalUpdateWithoutOwnersInput!]
  upsert: [AnimalUpsertWithoutOwnersInput!]
}

input AnimalUpdateWithoutOwnersDataInput {
  name: String
  tail: Boolean
  legs: Int
}

input AnimalUpdateWithoutOwnersInput {
  where: AnimalWhereUniqueInput!
  data: AnimalUpdateWithoutOwnersDataInput!
}

input AnimalUpsertWithoutOwnersInput {
  where: AnimalWhereUniqueInput!
  update: AnimalUpdateWithoutOwnersDataInput!
  create: AnimalCreateWithoutOwnersInput!
}

input AnimalWhereInput {
  AND: [AnimalWhereInput!]
  OR: [AnimalWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tail: Boolean
  tail_not: Boolean
  legs: Int
  legs_not: Int
  legs_in: [Int!]
  legs_not_in: [Int!]
  legs_lt: Int
  legs_lte: Int
  legs_gt: Int
  legs_gte: Int
  owners: UserWhereInput
}

input AnimalWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  count: Long!
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  name: String!
  owner: UserCreateOneInput!
  members: ChannelMemberCreateManyWithoutChannelInput
}

input ChannelCreateOneWithoutMembersInput {
  create: ChannelCreateWithoutMembersInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateWithoutMembersInput {
  name: String!
  owner: UserCreateOneInput!
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

type ChannelMember {
  name(where: UserWhereInput): User!
  channel(where: ChannelWhereInput): Channel!
  role: String!
}

type ChannelMemberConnection {
  pageInfo: PageInfo!
  edges: [ChannelMemberEdge]!
  aggregate: AggregateChannelMember!
}

input ChannelMemberCreateInput {
  role: String!
  name: UserCreateOneInput!
  channel: ChannelCreateOneWithoutMembersInput!
}

input ChannelMemberCreateManyWithoutChannelInput {
  create: [ChannelMemberCreateWithoutChannelInput!]
}

input ChannelMemberCreateWithoutChannelInput {
  role: String!
  name: UserCreateOneInput!
}

type ChannelMemberEdge {
  node: ChannelMember!
  cursor: String!
}

enum ChannelMemberOrderByInput {
  role_ASC
  role_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChannelMemberPreviousValues {
  role: String!
}

type ChannelMemberSubscriptionPayload {
  mutation: MutationType!
  node: ChannelMember
  updatedFields: [String!]
  previousValues: ChannelMemberPreviousValues
}

input ChannelMemberSubscriptionWhereInput {
  AND: [ChannelMemberSubscriptionWhereInput!]
  OR: [ChannelMemberSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelMemberWhereInput
}

input ChannelMemberUpdateInput {
  role: String
  name: UserUpdateOneInput
  channel: ChannelUpdateOneWithoutMembersInput
}

input ChannelMemberUpdateManyWithoutChannelInput {
  create: [ChannelMemberCreateWithoutChannelInput!]
}

input ChannelMemberWhereInput {
  AND: [ChannelMemberWhereInput!]
  OR: [ChannelMemberWhereInput!]
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  name: UserWhereInput
  channel: ChannelWhereInput
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChannelPreviousValues {
  id: ID!
  name: String!
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
}

input ChannelUpdateInput {
  name: String
  owner: UserUpdateOneInput
  members: ChannelMemberUpdateManyWithoutChannelInput
}

input ChannelUpdateOneWithoutMembersInput {
  create: ChannelCreateWithoutMembersInput
  connect: ChannelWhereUniqueInput
  disconnect: ChannelWhereUniqueInput
  delete: ChannelWhereUniqueInput
  update: ChannelUpdateWithoutMembersInput
  upsert: ChannelUpsertWithoutMembersInput
}

input ChannelUpdateWithoutMembersDataInput {
  name: String
  owner: UserUpdateOneInput
}

input ChannelUpdateWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutMembersDataInput!
}

input ChannelUpsertWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutMembersDataInput!
  create: ChannelCreateWithoutMembersInput!
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  owner: UserWhereInput
  members_every: ChannelMemberWhereInput
  members_some: ChannelMemberWhereInput
  members_none: ChannelMemberWhereInput
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createAnimal(data: AnimalCreateInput!): Animal!
  createChannel(data: ChannelCreateInput!): Channel!
  createChannelMember(data: ChannelMemberCreateInput!): ChannelMember!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAnimal(data: AnimalUpdateInput!, where: AnimalWhereUniqueInput!): Animal
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAnimal(where: AnimalWhereUniqueInput!): Animal
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAnimal(where: AnimalWhereUniqueInput!, create: AnimalCreateInput!, update: AnimalUpdateInput!): Animal!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyAnimals(data: AnimalUpdateInput!, where: AnimalWhereInput!): BatchPayload!
  updateManyChannels(data: ChannelUpdateInput!, where: ChannelWhereInput!): BatchPayload!
  updateManyChannelMembers(data: ChannelMemberUpdateInput!, where: ChannelMemberWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyAnimals(where: AnimalWhereInput!): BatchPayload!
  deleteManyChannels(where: ChannelWhereInput!): BatchPayload!
  deleteManyChannelMembers(where: ChannelMemberWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  animals(where: AnimalWhereInput, orderBy: AnimalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Animal]!
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelMembers(where: ChannelMemberWhereInput, orderBy: ChannelMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChannelMember]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  animal(where: AnimalWhereUniqueInput!): Animal
  channel(where: ChannelWhereUniqueInput!): Channel
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  animalsConnection(where: AnimalWhereInput, orderBy: AnimalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnimalConnection!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  channelMembersConnection(where: ChannelMemberWhereInput, orderBy: ChannelMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelMemberConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  animal(where: AnimalSubscriptionWhereInput): AnimalSubscriptionPayload
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  channelMember(where: ChannelMemberSubscriptionWhereInput): ChannelMemberSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
  animals: AnimalCreateManyWithoutOwnersInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAnimalsInput {
  create: UserCreateWithoutAnimalsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAnimalsInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
  animals: AnimalCreateManyWithoutOwnersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  animals: AnimalUpdateManyWithoutOwnersInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
}

input UserUpdateOneWithoutAnimalsInput {
  create: UserCreateWithoutAnimalsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutAnimalsInput
  upsert: UserUpsertWithoutAnimalsInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutAnimalsDataInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutAnimalsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAnimalsDataInput!
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
  animals: AnimalUpdateManyWithoutOwnersInput
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutAnimalsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAnimalsDataInput!
  create: UserCreateWithoutAnimalsInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  animals_every: AnimalWhereInput
  animals_some: AnimalWhereInput
  animals_none: AnimalWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  name: String
}
